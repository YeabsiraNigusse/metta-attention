!(bind! localToFarLinks 10) ;Ratio of local links to far links

;Function: HebbianCreationAgent-Run
;Description: This function creates hebbian links between atoms in the attentional
;   focus. It also creates links between atoms in the attentional focus and 
;   atoms outside the attentional focus. 
;   The number of links created between atoms in the attentional focus and atoms 
;   outside the attentional focus is determined by the localToFarLinks ratio. 
;   The function also removes links from the attentional focus if the number of 
;   incoming links exceeds the maxLinkNum.
;Parameters:
;   $space: resolves to the typespace where all atoms are stored.
;   $space2: resolves to attentionalFocus where atoms with hight STI are stored
;   $space3: resolves to newAtomInAV where atoms that are new to attentionalFocus are stored
;Returns: empty

(: HebbianCreationAgent-Run(-> Grounded Grounded Grounded ()))
(= (HebbianCreationAgent-Run $space $space2 $space3)
    ; if the attentional focus is empty no work is done
    (if ( == (attentionalFocusSize)  0)
        ()
        (let $source 
                    (let*
                        (
                            ($afAtoms (getNewAtomInAVList))
                            ($rm (collapse (removeAtomFromNewAVList (superpose $afAtoms) $space3)))
                        )
                            (superpose $afAtoms)
                    ) 
            (if  (unify (get-metatype $source) Expression (==  HEBBIAN_LINK (car-atom $source)) False)
                () ; if already hebbian_link nothing is done
                (
                    (let*
                        (
                            ($removeHebbian (removeHebbianLinksfromAF (collapse (match $space2 (HEBBIAN_LINK $a $b) (HEBBIAN_LINK $a $b))))) 
                            ($existingAsSourceHS  (getTargetNeighbors $source ASYMMETRIC_HEBBIAN_LINK $space)) ;;need to check if we should use source or sourceAtom
                            ($existingAsTarget  (getSourceNeighbors $source ASYMMETRIC_HEBBIAN_LINK $space))
                            ($needToBeSource ( setDifference $existingAsSourceHS) )
                            ($needToBeTarget  (setDifference $existingAsTarget))
                            ($count (size-atom $needToBeTarget ))
                            ($_ (collapse 
                                (let $target (superpose $needToBeSource)
                                        (if (not (== $target $source)) 
                                            (addHebbian $source $target)
                                            ()
                                        )
                                ) 
                                )
                            )
   
                            ($__ (collapse 
                                    (let $x (superpose $needToBeTarget)
                                        (if (not (== $x $source)) 
                                            (addHebbian $source $x)
                                            ()
                                        )
                                    ) 
                                )
                            )
                            ($farLinks (/ $count localToFarLinks )) ;round by default
                            ($___ (addFromOutSideAF $source $farLinks))
                            ($incomingSet (getIncomingSetByType $source HEBBIAN_LINK)) ;should I add other types of hebbian links?
                            ($maxLinkNum (getAttentionParam MAX_LINK_NUM))
                        )
                        (
                            (if (> (size-atom $incomingSet) $maxLinkNum )
                                (removeLinkRecursively (- (size-atom $incomingSet) $maxLinkNum))
                                ()
                            )
                            ()
                        )
                    )
                )
            )
        )
    )
)

;;Function: removeHebbianLinksfromAF
;;Description: removes Hebbian Links from the AF
;;Parameters: Atom
;;Return: Empty

; (: removeHebbianLinksfromAF (-> Link Empty))
(= (removeHebbianLinksfromAF $links)
    (if (== $links ())
        ()
        (let $superposed (superpose $links) 
            (remove-atom (attentionalFocus) $superposed))
    )
)


;Function: getSourceAtom
;Description: returns the source atom of a link
;Parameters: Atom
;Returns: Atom

(:getSourceAtom(-> Atom Atom))
( = (getSourceAtom $source)
    (if (== (size-atom $source) 3) ;if source is a link
        (let* (
            ($sourceAndTarget (cdr-atom $source))
            ($sourceAtom (car-atom $sourceAndTarget))
            )
            $sourceAtom
        )
        ;else
         $source ;source is just a single atom
    )
)

;Function: removeLinkRecursively
;Description: removes links from the attentional focus a given number of times 
;Parameters: $number- Number of times to remove links
;Returns: empty

(:removeLinkRecursively(-> Number ()))
( = (removeLinkRecursively $num)
    (if ( or (== $num 0) (== 0 (attentionalFocusSize)))
        ()
        (let*
            (
                ($randomAtom (getRandomAtomInAF))
                ($x (let $temp (remove-atom (attentionalFocus) $randomAtom) $temp))
            )
            (removeLinkRecursively (- $num 1))
        )
    )
)

; return the atoms that are in the attentional focus but not in the list 
;Function: setDifference
;Description: returns the atoms that are in the attentional focus but not in the list
;Parameters: $incomingList- List of atoms
;Returns: List of atoms

(:setDifference (-> List List))
( = (setDifference  $IncomingList)
    (let $atomList (getAtomList)
        (subtraction-atom $atomList $IncomingList )
    )
)

;Function: addFromOutSideAF
;Description: adds hebbian links from the source atom to atoms outside the attentional focus
;Parameters: $source- Atom, $farLinks- Number of links to be created
;Returns: empty

(:addFromOutSideAF(-> Atom Number ()))
( = (addFromOutSideAF  $source $farLinks)
    (if ( == $farLinks 0 )
        ()
        (let $target (getRandomAtomNotInAF)
            (if (== %Undefined% $target)
                ()
                (
                    (if (== (get-metatype $target) Expression)
                        (if (== (car-atom $target) HEBBIAN_LINK)
                            ()
                            (if (or (atomIsInAF (ASYMMETRIC_HEBBIAN_LINK $source $target)) (== $target $source)) ;If the link exists dont add it again 
                                ()
                                (
                                    (addHebbian $source $target )
                                    (addFromOutSideAF $source (- $farLinks 1))
                                )
                            )
                        )
                        (if (or (atomIsInAF (ASYMMETRIC_HEBBIAN_LINK $source $target)) (== $target $source));If the link exists dont add it again 
                            ()
                            (
                                (addHebbian $source $target )
                                (addFromOutSideAF $source (- $farLinks 1))
                            )
                        )
                    )
                )
            )
        )
    )
)

;Function: addHebbian
;Description: adds a hebbian link between two atoms
;Parameters: $source- Atom, $target- Atom
;Returns: empty

(: addHebbian (-> Atom Atom ()))
(= (addHebbian $source $target)
    (let $link (ASYMMETRIC_HEBBIAN_LINK $source $target)
        (setStv $link (0.5 0.1))
    )
)

(= (removeAtomFromNewAVList $atom $space)
    (remove-atom $space $atom)
)
