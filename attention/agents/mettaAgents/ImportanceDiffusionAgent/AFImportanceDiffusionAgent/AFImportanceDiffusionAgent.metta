!(bind! maxSpreadPercentage 0.4)

;; This function will return the diffusion source vector (atoms that can be diffused) from AF
;; Parameters $space: The space that will be used to find the diffusion source vector
;; Return : The diffusion source vector

(: diffusionSourceVector (-> Grounded Atom))
(= (diffusionSourceVector $space)
    (let*
        (
            ($atoms (collapse (let $temp (match $space $x $x)
                (if (== (get-metatype $temp) Expression)
                    (if (== (car-atom $temp) HEBBIAN_LINK)
                        (empty)
                        $temp
                    )
                    $temp
                    
                ))))
        )
        $atoms
    )
)


;; This function will calculate the diffusion amount
;; Parameters $atom: The atom that will be used to calculate the diffusion amount
;; Return : The diffusion amount

(: calculateDiffusionAmount (-> Atom Number))
(= (calculateDiffusionAmount $atom)
    (* (getSTI $atom) maxSpreadPercentage)
)

;; This function will retrieve atoms that can diffuse from the AF and pass them
;; To a function that will callculate how much they can diffuse.
;; Parameters $space: The space that will be used to find the diffusion source vector
;;            $space2: The space that will be used to find incomingSets
;; Return: Unit Atom
(: spreadImportance (-> Grounded Grounded Atom))
(= (spreadImportance $space $space2)
    (let* 
        (
            ($diffusionSourceVector (diffusionSourceVector $space))
            (($source $stidiff $atomToRecive) (diffuseAtomWrapper $diffusionSourceVector $space2))
        )
        (exchangeSTI $source $stidiff $atomToRecive)
    )
)

;; This functions calls diffuseAtom on atoms from the first variable and calls
;; a function to parse the output of the diffuseAtom function
;; Parameters: 
;;      $diffusionSourceVector: Expression atom of all atoms in AF that can diffuse
;;      $space2: The space that will be used to find incomingSets (TypeSpace)
(: diffuseAtomWrapper (-> Expression Grounded Expression))
(= (diffuseAtomWrapper $diffusionSourceVector $space2)
    (let* 
        (
            ($vals (superpose $diffusionSourceVector))
            ($difout (diffuseAtom $vals $space2 AF))
        )
        (parseout $vals $difout)
    )
)

;; This function takes a pattern for the atom that will be diffusing and an
;; Expression atom for all diffusions that it will do and return total and expression
;; atom of the total sti to reduce from source and all diffusion from source.
;; Parameters:
;;      $source: Atom in AF that will be diffusing
;;      $iset: Expression atom of all possible diffusion from $source
;; Return: Expression atom having 2 index with first index total sti removed from source 
;;         second index an expresion atom of all atoms reciving diffusion from source
(: parseout (-> Atom Expression Expression))
(= (parseout $source $iset)
    (let*
        (
            ($nums (collapse (extractNum $iset)))
            ($fold (foldl-atom $nums 0 $acc $x (+ $acc $x)))
            ($diff (* -1 $fold))
        )
        ($source $diff $iset)
    )
)

;; This function recives an expresion atom having multiple expresion atoms whose
;; last atom is a number value. The function returns all number values 
;; non-determinstically
;; Parameters:
;;      $iset: Expression atom having Expression atoms of structure
;;                ($atom $atomToRecive $values) generated by diffuseAtom
;; Return: Number the $values vairable (non-deterministic)
(: extractNum (-> Expression Number))
(= (extractNum $iset)
    (let $vals
        (superpose $iset)
        (unify $vals ($atom $atomToRecive $values) $values 0)
    )
)

;; This function takes a source atom and how much it is diffusing and Expression
;; atom of all possible diffusion made by it. The function call functions
;; that can exhchange the STI values of the source and targets.
;; Parameters:
;;      $source: Atom the is currently diffusing and is in AF
;;      $stidiff: Number value of how much the source is diffusing in total
;;      $tail: Expression atom of all atom reciving and the amount they recive
;;                sturcture is similar to output from diffuseAtom
;; Return: Unit Atom ()
(: exchangeSTI (-> Atom Atom Expression Atom))
(= (exchangeSTI $source $stidiff $tail)
    (if (== $stidiff 0)
        ()
        (let ()
                (exchangeSourceSti $source $stidiff)
                (exchangeTargetSti $tail)
        )
    )

)

;; This functon is responsible for taking an atom and a number and changing
;; the oldsti by that amount.
;; Parameters: 
;;      $source: Atom that is diffusing to other atoms
;;      $stidiff: Number value of how much sti change an atom should have
;; Return: Unit Atom ()
(: exchangeSourceSti (-> Atom Atom Atom))
(= (exchangeSourceSti $source $stidiff)
    (let* 
        (
            ($oldSti (getSTI $source))
            ($newSti (+ $oldSti $stidiff))
        )
        (setSTI $source $newSti)
    )
)

;; This function is responsilbe for taking an Expression atom with atoms
;; and how much STI change they have and calling setSTI on it.
;; Parameters:
;;      $iset: Expression atom with similar structure to diffuseAtom output
;; Return: Unit Atom (non-deterministic)
(: exchangeTargetSti (-> Expression Atom))
(= (exchangeTargetSti $iset)
    (let* 
        (
            (($atom $atomToReceive $stiGiven) (superpose $iset))
            ($targetOldSti (getSTI $atomToReceive))
            ($targetNewSti (+ $targetOldSti $stiGiven))
        )
        (if (== $atomToReceive ())
            ()
            (setSTI $atomToReceive $targetNewSti)
        )
    )
)
;; This function is the entry point to the AFImportance Diffusion Agent
;; Parameters $space: The space that will be used to find the diffusion source vector
;;            $space2: The space that will be used to find incomingSets
;; Return : The spreadImportance function is called

(: AFImportanceDiffusionAgent-Run (-> Grounded Grounded Empty))
(= (AFImportanceDiffusionAgent-Run $space $space2)
    (let ()
        (let ()
            (println! (@@@@@@@@@@@@ AFImportanceDiffusionAgent @@@@@@@@@@@@@@@@@@))
            (spreadImportance $space $space2) 
        )
        (println! (@@@@@@@@@@@@@@ AFImportanceDiffusionAgent Finished @@@@@@@@@@@@@@@@@@))
    )
)
